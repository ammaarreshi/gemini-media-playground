import React, { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Button } from "@/components/ui/button";
import { base64ToDataURL, downloadBase64Image } from "@/lib/image-utils";
import { Textarea } from "@/components/ui/textarea";
import { Download, Pencil, Check, X, Film, Wand2, Play } from "lucide-react";
import { VideoPlayer } from "./video-player";
import { toast } from "sonner";

interface ImageDisplayProps {
  imageBase64: string | null;
  onEdit: (prompt: string, imageBase64: string) => void;
  isLoading: boolean;
  onGenerateVideo?: (prompt: string, imageBase64: string) => void;
  onInstantAnimate?: (imageBase64: string) => void;
}

export function ImageDisplay({
  imageBase64,
  onEdit,
  isLoading,
  onGenerateVideo,
  onInstantAnimate,
}: ImageDisplayProps) {
  const [editPrompt, setEditPrompt] = useState<string>("");
  const [isEditing, setIsEditing] = useState<boolean>(false);
  const [videoPrompt, setVideoPrompt] = useState<string>("");
  const [isVideoPrompting, setIsVideoPrompting] = useState<boolean>(false);

  if (!imageBase64) return null;

  const handleDownload = () => {
    downloadBase64Image(imageBase64);
  };

  const handleEdit = () => {
    if (editPrompt.trim() && imageBase64) {
      onEdit(editPrompt, imageBase64);
      setEditPrompt("");
      setIsEditing(false);
    }
  };

  const handleCancelEdit = () => {
    setIsEditing(false);
    setEditPrompt("");
  };

  const handleCancelVideoPrompt = () => {
    setIsVideoPrompting(false);
    setVideoPrompt("");
  };

  const handleVideoGenerate = () => {
    if (videoPrompt.trim() && imageBase64 && onGenerateVideo) {
      onGenerateVideo(videoPrompt, imageBase64);
      setVideoPrompt("");
      setIsVideoPrompting(false);
    }
  };

  const handleInstantAnimate = () => {
    if (imageBase64 && onInstantAnimate) {
      onInstantAnimate(imageBase64);

      // Close video prompting if it's open
      if (isVideoPrompting) {
        setIsVideoPrompting(false);
        setVideoPrompt("");
      }

      // Close edit mode if it's open
      if (isEditing) {
        setIsEditing(false);
        setEditPrompt("");
      }
    }
  };

  const toggleVideoPrompt = () => {
    setIsVideoPrompting(!isVideoPrompting);

    // Close edit mode if it's open
    if (isEditing) {
      setIsEditing(false);
      setEditPrompt("");
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{
        type: "spring",
        damping: 20,
        stiffness: 300,
        duration: 0.6,
      }}
      className="flex flex-col gap-4 w-full mx-auto"
      style={{ maxWidth: "100%" }}
    >
      <motion.div
        className="relative w-full overflow-hidden bg-muted/20"
        initial={{ scale: 0.95 }}
        animate={{ scale: 1 }}
        transition={{ duration: 0.3, delay: 0.1 }}
        style={{
          borderRadius: "1rem",
          padding: "0.25rem",
          maxWidth: "100%",
          margin: "0 auto",
        }}
      >
        {imageBase64 && (
          <motion.img
            src={base64ToDataURL(imageBase64)}
            alt="Generated by Gemini"
            className="w-full h-auto max-h-[350px] object-contain"
            initial={{ filter: "blur(10px)" }}
            animate={{ filter: "blur(0px)" }}
            transition={{ duration: 0.5 }}
            style={{
              borderRadius: "0.75rem",
              display: "block",
              margin: "0 auto",
            }}
          />
        )}
      </motion.div>

      <div className="flex justify-center gap-2 flex-wrap">
        <Button
          variant="outline"
          size="sm"
          className="rounded-full gap-1.5"
          onClick={handleDownload}
          disabled={isLoading}
        >
          <Download size={15} />
          <span>Download</span>
        </Button>

        {!isVideoPrompting && (
          <Button
            variant="outline"
            size="sm"
            className="rounded-full gap-1.5"
            onClick={() => setIsEditing(true)}
            disabled={isLoading || isEditing}
          >
            <Pencil size={15} />
            <span>Edit</span>
          </Button>
        )}

        {onGenerateVideo && !isVideoPrompting && (
          <Button
            variant="outline"
            size="sm"
            className="rounded-full gap-1.5"
            onClick={toggleVideoPrompt}
            disabled={isLoading}
          >
            <Film size={15} />
            <span>Custom Animate</span>
          </Button>
        )}

        {onInstantAnimate && (
          <Button
            variant="outline"
            size="sm"
            className="rounded-full gap-1.5"
            onClick={handleInstantAnimate}
            disabled={isLoading}
          >
            <Wand2 size={15} />
            <span>Instant Animate</span>
          </Button>
        )}

        {isEditing && (
          <Button
            variant="outline"
            size="sm"
            className="rounded-full gap-1.5 text-destructive border-destructive hover:bg-destructive/10"
            onClick={handleCancelEdit}
            disabled={isLoading}
          >
            <X size={15} />
            <span>Cancel</span>
          </Button>
        )}

        {isVideoPrompting && (
          <Button
            variant="outline"
            size="sm"
            className="rounded-full gap-1.5 text-destructive border-destructive hover:bg-destructive/10"
            onClick={handleCancelVideoPrompt}
            disabled={isLoading}
          >
            <X size={15} />
            <span>Cancel</span>
          </Button>
        )}
      </div>

      {isEditing && (
        <motion.div
          initial={{ opacity: 0, height: 0 }}
          animate={{ opacity: 1, height: "auto" }}
          exit={{ opacity: 0, height: 0 }}
          className="flex flex-col gap-2 mt-2"
        >
          <div className="relative">
            <div className="text-xs text-muted-foreground mb-1 ml-1">
              Describe how you want to edit the image
            </div>
            <Textarea
              value={editPrompt}
              onChange={(e) => setEditPrompt(e.target.value)}
              placeholder="Example: Add a sunset background, change to watercolor style, make it more vibrant..."
              className="min-h-[80px] p-4 pr-12 rounded-xl resize-none"
              disabled={isLoading}
            />
            <Button
              size="icon"
              className="absolute bottom-3 right-3 rounded-full h-8 w-8"
              onClick={handleEdit}
              disabled={!editPrompt.trim() || isLoading}
            >
              <Check size={15} />
            </Button>
          </div>
        </motion.div>
      )}

      {isVideoPrompting && (
        <motion.div
          initial={{ opacity: 0, height: 0 }}
          animate={{ opacity: 1, height: "auto" }}
          exit={{ opacity: 0, height: 0 }}
          className="flex flex-col gap-2 mt-2"
        >
          <div className="relative">
            <div className="text-xs text-muted-foreground mb-1 ml-1">
              Describe how you want to animate the image
            </div>
            <Textarea
              value={videoPrompt}
              onChange={(e) => setVideoPrompt(e.target.value)}
              placeholder="Example: The camera slowly zooms in, subtle movement in the clouds, gentle breeze effect..."
              className="min-h-[80px] p-4 pr-12 rounded-xl resize-none"
              disabled={isLoading}
            />
            <Button
              size="icon"
              className="absolute bottom-3 right-3 rounded-full h-8 w-8"
              onClick={handleVideoGenerate}
              disabled={!videoPrompt.trim() || isLoading}
            >
              <Check size={15} />
            </Button>
          </div>
        </motion.div>
      )}
    </motion.div>
  );
}
